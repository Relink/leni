'use strict';

var chai = require('chai');
chai.use(require('sinon-chai'));
var expect = chai.expect;
var sinon = require('sinon');
var EventEmitter = require('events').EventEmitter;
var init = require('./init');

describe('init', function () {
  var e1;

  beforeEach(function () {
    e1 = new EventEmitter();
  });

  describe('_initOnReady', function () {

    it('rejects the initial promise if emitter returns immediate error', function (done) {
      init._initOnReady(e1).catch(function (err) {
        expect(err).to.be.an('error');
        expect(err.message).to.match(/bar/);
        done();
      });
      e1.emit('error', new Error('bar'));
    });

    it('Resolves to the producer when ready is emitted before any errors', function (done) {
      init._initOnReady(e1).then(function (ee) {
        expect(ee).to.be.instanceof(EventEmitter);
        done();
      }).catch(function (err) {
        return done(err);
      });

      e1.emit('ready');
      e1.emit('error', new Error('should not be caught'));
    });
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbml0LnNwZWMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFJLE9BQU8sUUFBUSxNQUFSLENBQVA7QUFDSixLQUFLLEdBQUwsQ0FBUyxRQUFRLFlBQVIsQ0FBVDtBQUNBLElBQUksU0FBUyxLQUFLLE1BQUw7QUFDYixJQUFJLFFBQVEsUUFBUSxPQUFSLENBQVI7QUFDSixJQUFJLGVBQWUsUUFBUSxRQUFSLEVBQWtCLFlBQWxCO0FBQ25CLElBQUksT0FBTyxRQUFRLFFBQVIsQ0FBUDs7QUFFSixTQUFTLE1BQVQsRUFBaUIsWUFBTTtBQUNyQixNQUFJLEVBQUosQ0FEcUI7O0FBR3JCLGFBQVcsWUFBSztBQUNkLFNBQUssSUFBSSxZQUFKLEVBQUwsQ0FEYztHQUFMLENBQVgsQ0FIcUI7O0FBT3JCLFdBQVMsY0FBVCxFQUF5QixZQUFNOztBQUU3QixPQUFHLGdFQUFILEVBQXFFLGdCQUFRO0FBQzNFLFdBQUssWUFBTCxDQUFrQixFQUFsQixFQUNHLEtBREgsQ0FDUyxlQUFPO0FBQ1osZUFBTyxHQUFQLEVBQVksRUFBWixDQUFlLEVBQWYsQ0FBa0IsRUFBbEIsQ0FBcUIsT0FBckIsRUFEWTtBQUVaLGVBQU8sSUFBSSxPQUFKLENBQVAsQ0FBb0IsRUFBcEIsQ0FBdUIsS0FBdkIsQ0FBNkIsS0FBN0IsRUFGWTtBQUdaLGVBSFk7T0FBUCxDQURULENBRDJFO0FBTzNFLFNBQUcsSUFBSCxDQUFRLE9BQVIsRUFBaUIsSUFBSSxLQUFKLENBQVUsS0FBVixDQUFqQixFQVAyRTtLQUFSLENBQXJFLENBRjZCOztBQVk3QixPQUFHLGtFQUFILEVBQXVFLGdCQUFRO0FBQzdFLFdBQUssWUFBTCxDQUFrQixFQUFsQixFQUNHLElBREgsQ0FDUSxjQUFNO0FBQ1YsZUFBTyxFQUFQLEVBQVcsRUFBWCxDQUFjLEVBQWQsQ0FBaUIsVUFBakIsQ0FBNEIsWUFBNUIsRUFEVTtBQUVWLGVBRlU7T0FBTixDQURSLENBS0csS0FMSCxDQUtTO2VBQU8sS0FBSyxHQUFMO09BQVAsQ0FMVCxDQUQ2RTs7QUFRN0UsU0FBRyxJQUFILENBQVEsT0FBUixFQVI2RTtBQVM3RSxTQUFHLElBQUgsQ0FBUSxPQUFSLEVBQWlCLElBQUksS0FBSixDQUFVLHNCQUFWLENBQWpCLEVBVDZFO0tBQVIsQ0FBdkUsQ0FaNkI7R0FBTixDQUF6QixDQVBxQjtDQUFOLENBQWpCIiwiZmlsZSI6ImluaXQuc3BlYy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBjaGFpID0gcmVxdWlyZSgnY2hhaScpO1xuY2hhaS51c2UocmVxdWlyZSgnc2lub24tY2hhaScpKTtcbnZhciBleHBlY3QgPSBjaGFpLmV4cGVjdDtcbnZhciBzaW5vbiA9IHJlcXVpcmUoJ3Npbm9uJyk7XG52YXIgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyO1xudmFyIGluaXQgPSByZXF1aXJlKCcuL2luaXQnKTtcblxuZGVzY3JpYmUoJ2luaXQnLCAoKSA9PiB7XG4gIHZhciBlMTtcblxuICBiZWZvcmVFYWNoKCgpID0+e1xuICAgIGUxID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICB9KTtcblxuICBkZXNjcmliZSgnX2luaXRPblJlYWR5JywgKCkgPT4ge1xuXG4gICAgaXQoJ3JlamVjdHMgdGhlIGluaXRpYWwgcHJvbWlzZSBpZiBlbWl0dGVyIHJldHVybnMgaW1tZWRpYXRlIGVycm9yJywgZG9uZSA9PiB7XG4gICAgICBpbml0Ll9pbml0T25SZWFkeShlMSlcbiAgICAgICAgLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgZXhwZWN0KGVycikudG8uYmUuYW4oJ2Vycm9yJyk7XG4gICAgICAgICAgZXhwZWN0KGVyci5tZXNzYWdlKS50by5tYXRjaCgvYmFyLyk7XG4gICAgICAgICAgZG9uZSgpO1xuICAgICAgICB9KVxuICAgICAgZTEuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ2JhcicpKVxuICAgIH0pO1xuXG4gICAgaXQoJ1Jlc29sdmVzIHRvIHRoZSBwcm9kdWNlciB3aGVuIHJlYWR5IGlzIGVtaXR0ZWQgYmVmb3JlIGFueSBlcnJvcnMnLCBkb25lID0+IHtcbiAgICAgIGluaXQuX2luaXRPblJlYWR5KGUxKVxuICAgICAgICAudGhlbihlZSA9PiB7XG4gICAgICAgICAgZXhwZWN0KGVlKS50by5iZS5pbnN0YW5jZW9mKEV2ZW50RW1pdHRlcik7XG4gICAgICAgICAgZG9uZSgpO1xuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goZXJyID0+IGRvbmUoZXJyKSk7XG5cbiAgICAgIGUxLmVtaXQoJ3JlYWR5Jyk7XG4gICAgICBlMS5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignc2hvdWxkIG5vdCBiZSBjYXVnaHQnKSk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXX0=