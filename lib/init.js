'use strict';

var Promise = require('bluebird');
var kafka = require('kafka-node');
Promise.promisifyAll(kafka);
var _ = require('lodash');
var Leni = require('./Leni');

var init = {};

init._initOnReady = function (ee) {
  return new Promise(function (resolve, reject) {
    ee.on('ready', resolveEmitter);
    ee.on('error', rejectEmitter);

    function resolveEmitter() {
      ee.removeListener('ready', resolveEmitter);
      resolve(ee);
    };

    function rejectEmitter(err) {
      ee.removeListener('error', rejectEmitter);
      reject(err);
    };
  });
};

init._initClient = function initClient() {
  var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  var connectionString = _ref.connectionString;
  var clientId = _ref.clientId;
  var zkOptions = _ref.zkOptions;
  var noAckBatchOptions = _ref.noAckBatchOptions;

  var client = new kafka.Client(connectionString, clientId, zkOptions, noAckBatchOptions);
  return init._initOnReady(client);
};

init._initProducer = function initProducer(client, producerOpts) {
  return Promise.resolve(new kafka.HighLevelProducer(client, producerOpts));
};

init._initConsumer = function initConsumer(client, payloads, consumerOpts) {
  return Promise.resolve(new kafka.HighLevelConsumer(client, payloads, consumerOpts));
};

/**
 *
 * @param {Object} clientOpts
 * @param {Object} clientOpts.connectionString
 * @param {Object} clientOpts.clientId
 * @param {Object} clientOpts.zkOptions
 * @param {Object} clientOpts.noAckBatchOptions
 * @param {Object} consumerOpts
 * @param {Object} consumerOpts.payloads the payloads as per kafka-node
 * @param {Object} consumerOpts.optins the options as per kafka-node
 * @param {Object} producerOpts
 * @returns {Promise} resolves with instance of Leni class when the connection
 * to the client and the connection to the producer are created and recieved
 * the ready event.
 */
init.connect = function connect(clientOpts) {
  var _ref2 = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  var payloads = _ref2.payloads;
  var options = _ref2.options;
  var producerOpts = arguments[2];

  var client, consumer, producer;

  return init._initClient(clientOpts).then(function (_client) {
    client = _client;
    return payloads && init._initConsumer(client, payloads, options);
  }).then(function (_consumer) {
    consumer = _consumer;
    return producerOpts && init._initProducer(client, producerOpts);
  }).then(function (_producer) {
    producer = _producer;
    return new Leni(client, consumer, producer);
  });
};

module.exports = init;
//# sourceMappingURL=data:application/json;base64,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QVAsR0FBaUIsSUFBakIiLCJmaWxlIjoiaW5pdC5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBQcm9taXNlID0gcmVxdWlyZSgnYmx1ZWJpcmQnKTtcbnZhciBrYWZrYSA9IHJlcXVpcmUoJ2thZmthLW5vZGUnKTtcblByb21pc2UucHJvbWlzaWZ5QWxsKGthZmthKTtcbnZhciBfID0gcmVxdWlyZSgnbG9kYXNoJyk7XG52YXIgTGVuaSA9IHJlcXVpcmUoJy4vTGVuaScpO1xuXG52YXIgaW5pdCA9IHt9O1xuXG5pbml0Ll9pbml0T25SZWFkeSA9IGZ1bmN0aW9uIChlZSkge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGVlLm9uKCdyZWFkeScsIHJlc29sdmVFbWl0dGVyKTtcbiAgICBlZS5vbignZXJyb3InLCByZWplY3RFbWl0dGVyKTtcblxuICAgIGZ1bmN0aW9uIHJlc29sdmVFbWl0dGVyKCkge1xuICAgICAgZWUucmVtb3ZlTGlzdGVuZXIoJ3JlYWR5JywgcmVzb2x2ZUVtaXR0ZXIpO1xuICAgICAgcmVzb2x2ZShlZSk7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHJlamVjdEVtaXR0ZXIoZXJyKSB7XG4gICAgICBlZS5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCByZWplY3RFbWl0dGVyKTtcbiAgICAgIHJlamVjdChlcnIpO1xuICAgIH07XG4gIH0pO1xufTtcblxuaW5pdC5faW5pdENsaWVudCA9IGZ1bmN0aW9uIGluaXRDbGllbnQoe2Nvbm5lY3Rpb25TdHJpbmcsIGNsaWVudElkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgemtPcHRpb25zLCBub0Fja0JhdGNoT3B0aW9uc30gPSB7fSkge1xuICB2YXIgY2xpZW50ID0gbmV3IGthZmthLkNsaWVudChjb25uZWN0aW9uU3RyaW5nLCBjbGllbnRJZCwgemtPcHRpb25zLCBub0Fja0JhdGNoT3B0aW9ucyk7XG4gIHJldHVybiBpbml0Ll9pbml0T25SZWFkeShjbGllbnQpO1xufTtcblxuaW5pdC5faW5pdFByb2R1Y2VyID0gZnVuY3Rpb24gaW5pdFByb2R1Y2VyKGNsaWVudCwgcHJvZHVjZXJPcHRzKSB7XG4gIHJldHVybiBQcm9taXNlLnJlc29sdmUobmV3IGthZmthLkhpZ2hMZXZlbFByb2R1Y2VyKGNsaWVudCwgcHJvZHVjZXJPcHRzKSk7XG59O1xuXG5pbml0Ll9pbml0Q29uc3VtZXIgPSBmdW5jdGlvbiBpbml0Q29uc3VtZXIoY2xpZW50LCBwYXlsb2FkcywgY29uc3VtZXJPcHRzKSB7XG4gIHJldHVybiBQcm9taXNlLnJlc29sdmUobmV3IGthZmthLkhpZ2hMZXZlbENvbnN1bWVyKGNsaWVudCwgcGF5bG9hZHMsIGNvbnN1bWVyT3B0cykpO1xufTtcblxuLyoqXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNsaWVudE9wdHNcbiAqIEBwYXJhbSB7T2JqZWN0fSBjbGllbnRPcHRzLmNvbm5lY3Rpb25TdHJpbmdcbiAqIEBwYXJhbSB7T2JqZWN0fSBjbGllbnRPcHRzLmNsaWVudElkXG4gKiBAcGFyYW0ge09iamVjdH0gY2xpZW50T3B0cy56a09wdGlvbnNcbiAqIEBwYXJhbSB7T2JqZWN0fSBjbGllbnRPcHRzLm5vQWNrQmF0Y2hPcHRpb25zXG4gKiBAcGFyYW0ge09iamVjdH0gY29uc3VtZXJPcHRzXG4gKiBAcGFyYW0ge09iamVjdH0gY29uc3VtZXJPcHRzLnBheWxvYWRzIHRoZSBwYXlsb2FkcyBhcyBwZXIga2Fma2Etbm9kZVxuICogQHBhcmFtIHtPYmplY3R9IGNvbnN1bWVyT3B0cy5vcHRpbnMgdGhlIG9wdGlvbnMgYXMgcGVyIGthZmthLW5vZGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm9kdWNlck9wdHNcbiAqIEByZXR1cm5zIHtQcm9taXNlfSByZXNvbHZlcyB3aXRoIGluc3RhbmNlIG9mIExlbmkgY2xhc3Mgd2hlbiB0aGUgY29ubmVjdGlvblxuICogdG8gdGhlIGNsaWVudCBhbmQgdGhlIGNvbm5lY3Rpb24gdG8gdGhlIHByb2R1Y2VyIGFyZSBjcmVhdGVkIGFuZCByZWNpZXZlZFxuICogdGhlIHJlYWR5IGV2ZW50LlxuICovXG5pbml0LmNvbm5lY3QgPSBmdW5jdGlvbiBjb25uZWN0IChjbGllbnRPcHRzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3BheWxvYWRzLCBvcHRpb25zfSA9IHt9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvZHVjZXJPcHRzKSB7XG4gIHZhciBjbGllbnQsIGNvbnN1bWVyLCBwcm9kdWNlcjtcblxuICByZXR1cm4gaW5pdC5faW5pdENsaWVudChjbGllbnRPcHRzKVxuICAgIC50aGVuKF9jbGllbnQgPT4ge1xuICAgICAgY2xpZW50ID0gX2NsaWVudDtcbiAgICAgIHJldHVybiBwYXlsb2FkcyAmJiBpbml0Ll9pbml0Q29uc3VtZXIoY2xpZW50LCBwYXlsb2Fkcywgb3B0aW9ucyk7XG4gICAgfSlcbiAgICAudGhlbihfY29uc3VtZXIgPT4ge1xuICAgICAgY29uc3VtZXIgPSBfY29uc3VtZXI7XG4gICAgICByZXR1cm4gcHJvZHVjZXJPcHRzICYmIGluaXQuX2luaXRQcm9kdWNlcihjbGllbnQsIHByb2R1Y2VyT3B0cyk7XG4gICAgfSlcbiAgICAudGhlbihfcHJvZHVjZXIgPT4ge1xuICAgICAgcHJvZHVjZXIgPSBfcHJvZHVjZXI7XG4gICAgICByZXR1cm4gbmV3IExlbmkoY2xpZW50LCBjb25zdW1lciwgcHJvZHVjZXIpO1xuICAgIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBpbml0O1xuIl19