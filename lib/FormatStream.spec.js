'use strict';

var chai = require('chai');
chai.use(require('sinon-chai'));
var expect = chai.expect;
var sinon = require('sinon');
var proxyquire = require('proxyquire');

var stream = require('stream');

var FormatStream = require('./FormatStream');

describe('FormatStream', function () {

  describe('Constructor', function () {
    var data = { bar: 'qux' };
    var formatStub = sinon.stub();

    before(function () {
      sinon.stub(FormatStream, '_formatPayload', formatStub);
    });
    beforeEach(function () {
      FormatStream._formatPayload.reset();
      formatStub.reset();
    });
    after(function () {
      return FormatStream._formatPayload.restore();
    });
    // note: these are actually functional tests and test formatPayload
    // implicitely!! Should probably be changed.

    it('takes a string as a topic', function () {
      var format = new FormatStream('foo');
      format.write(data);
      expect(FormatStream._formatPayload).to.have.been.calledWith(data, 'foo');
    });

    it('takes a function as a topic transformer', function () {
      var format = new FormatStream(function (msg) {
        return 'foo';
      });
      format.write(data);
      expect(FormatStream._formatPayload).to.have.been.calledWith(data, 'foo');
    });

    it('throws when given a bunk function', function (done) {
      var format = new FormatStream(function (msg) {
        return null;
      });
      format.on('error', function (err) {
        expect(err).to.be.an.error;
        done();
      });
      format.write(data);
    });

    it('handles errors from formatPayload', function (done) {
      var format = new FormatStream(function (msg) {
        return 'foo';
      });
      var error = new Error('foo');
      formatStub.throws(error);
      format.on('error', function (err) {
        expect(err).to.equal(error);
        done();
      });
      format.write(data);
    });
  });

  describe('_formatPayload', function () {
    var data = {
      foo: 'bar'
    };

    it('makes messages into an Array', function () {
      var payload = FormatStream._formatPayload(data, 'baz');
      expect(payload).to.be.an('array');
      expect(payload[0].messages).to.be.an('array');
      // expect(payload[0].messages[0]).to.equal('foo')
    });

    it('makes the topic whatever the topic should be', function () {
      var payload = FormatStream._formatPayload(data, 'baz');
      expect(payload[0].topic).to.equal('baz');
    });

    it('throws when not given a topic', function () {
      expect(FormatStream._formatPayload.bind(null, data)).to.throw();
    });

    it('works with arrays', function () {
      var arr = ['foo', 'bar'];
      var payload = FormatStream._formatPayload(arr, 'baz');
      expect(JSON.parse(payload[0].messages[0])).to.equal('foo');
      expect(JSON.parse(payload[0].messages[1])).to.equal('bar');
    });
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9Gb3JtYXRTdHJlYW0uc3BlYy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLElBQUksT0FBTyxRQUFRLE1BQVIsQ0FBUDtBQUNKLEtBQUssR0FBTCxDQUFTLFFBQVEsWUFBUixDQUFUO0FBQ0EsSUFBSSxTQUFTLEtBQUssTUFBTDtBQUNiLElBQUksUUFBUSxRQUFRLE9BQVIsQ0FBUjtBQUNKLElBQUksYUFBYSxRQUFRLFlBQVIsQ0FBYjs7QUFFSixJQUFJLFNBQVMsUUFBUSxRQUFSLENBQVQ7O0FBR0osSUFBSSxlQUFlLFFBQVEsZ0JBQVIsQ0FBZjs7QUFFSixTQUFTLGNBQVQsRUFBeUIsWUFBTTs7QUFFN0IsV0FBUyxhQUFULEVBQXdCLFlBQU07QUFDNUIsUUFBSSxPQUFPLEVBQUUsS0FBSyxLQUFMLEVBQVQsQ0FEd0I7QUFFNUIsUUFBSSxhQUFhLE1BQU0sSUFBTixFQUFiLENBRndCOztBQUk1QixXQUFPLFlBQU07QUFDWCxZQUFNLElBQU4sQ0FBVyxZQUFYLEVBQXlCLGdCQUF6QixFQUEyQyxVQUEzQyxFQURXO0tBQU4sQ0FBUCxDQUo0QjtBQU81QixlQUFXLFlBQU07QUFDZixtQkFBYSxjQUFiLENBQTRCLEtBQTVCLEdBRGU7QUFFZixpQkFBVyxLQUFYLEdBRmU7S0FBTixDQUFYLENBUDRCO0FBVzVCLFVBQU07YUFBTSxhQUFhLGNBQWIsQ0FBNEIsT0FBNUI7S0FBTixDQUFOOzs7O0FBWDRCLE1BZTVCLENBQUcsMkJBQUgsRUFBZ0MsWUFBTTtBQUNwQyxVQUFJLFNBQVMsSUFBSSxZQUFKLENBQWlCLEtBQWpCLENBQVQsQ0FEZ0M7QUFFcEMsYUFBTyxLQUFQLENBQWEsSUFBYixFQUZvQztBQUdwQyxhQUFPLGFBQWEsY0FBYixDQUFQLENBQW9DLEVBQXBDLENBQXVDLElBQXZDLENBQTRDLElBQTVDLENBQWlELFVBQWpELENBQTRELElBQTVELEVBQWtFLEtBQWxFLEVBSG9DO0tBQU4sQ0FBaEMsQ0FmNEI7O0FBcUI1QixPQUFH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LFFBQVgsQ0FBb0IsQ0FBcEIsQ0FBWCxDQUFQLEVBQTJDLEVBQTNDLENBQThDLEtBQTlDLENBQW9ELEtBQXBELEVBSjRCO0tBQU4sQ0FBeEIsQ0FyQitCO0dBQU4sQ0FBM0IsQ0FsRDZCO0NBQU4sQ0FBekIiLCJmaWxlIjoiRm9ybWF0U3RyZWFtLnNwZWMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgY2hhaSA9IHJlcXVpcmUoJ2NoYWknKTtcbmNoYWkudXNlKHJlcXVpcmUoJ3Npbm9uLWNoYWknKSk7XG52YXIgZXhwZWN0ID0gY2hhaS5leHBlY3Q7XG52YXIgc2lub24gPSByZXF1aXJlKCdzaW5vbicpO1xudmFyIHByb3h5cXVpcmUgPSByZXF1aXJlKCdwcm94eXF1aXJlJyk7XG5cbnZhciBzdHJlYW0gPSByZXF1aXJlKCdzdHJlYW0nKTtcblxuXG52YXIgRm9ybWF0U3RyZWFtID0gcmVxdWlyZSgnLi9Gb3JtYXRTdHJlYW0nKTtcblxuZGVzY3JpYmUoJ0Zvcm1hdFN0cmVhbScsICgpID0+IHtcblxuICBkZXNjcmliZSgnQ29uc3RydWN0b3InLCAoKSA9PiB7XG4gICAgdmFyIGRhdGEgPSB7IGJhcjogJ3F1eCcgfTtcbiAgICB2YXIgZm9ybWF0U3R1YiA9IHNpbm9uLnN0dWIoKTtcblxuICAgIGJlZm9yZSgoKSA9PiB7XG4gICAgICBzaW5vbi5zdHViKEZvcm1hdFN0cmVhbSwgJ19mb3JtYXRQYXlsb2FkJywgZm9ybWF0U3R1Yik7XG4gICAgfSlcbiAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgIEZvcm1hdFN0cmVhbS5fZm9ybWF0UGF5bG9hZC5yZXNldCgpO1xuICAgICAgZm9ybWF0U3R1Yi5yZXNldCgpO1xuICAgIH0pXG4gICAgYWZ0ZXIoKCkgPT4gRm9ybWF0U3RyZWFtLl9mb3JtYXRQYXlsb2FkLnJlc3RvcmUoKSlcbiAgICAvLyBub3RlOiB0aGVzZSBhcmUgYWN0dWFsbHkgZnVuY3Rpb25hbCB0ZXN0cyBhbmQgdGVzdCBmb3JtYXRQYXlsb2FkXG4gICAgLy8gaW1wbGljaXRlbHkhISBTaG91bGQgcHJvYmFibHkgYmUgY2hhbmdlZC5cblxuICAgIGl0KCd0YWtlcyBhIHN0cmluZyBhcyBhIHRvcGljJywgKCkgPT4ge1xuICAgICAgdmFyIGZvcm1hdCA9IG5ldyBGb3JtYXRTdHJlYW0oJ2ZvbycpXG4gICAgICBmb3JtYXQud3JpdGUoZGF0YSk7XG4gICAgICBleHBlY3QoRm9ybWF0U3RyZWFtLl9mb3JtYXRQYXlsb2FkKS50by5oYXZlLmJlZW4uY2FsbGVkV2l0aChkYXRhLCAnZm9vJylcbiAgICB9KTtcblxuICAgIGl0KCd0YWtlcyBhIGZ1bmN0aW9uIGFzIGEgdG9waWMgdHJhbnNmb3JtZXInLCAoKSA9PiB7XG4gICAgICB2YXIgZm9ybWF0ID0gbmV3IEZvcm1hdFN0cmVhbShtc2cgPT4gJ2ZvbycpO1xuICAgICAgZm9ybWF0LndyaXRlKGRhdGEpO1xuICAgICAgZXhwZWN0KEZvcm1hdFN0cmVhbS5fZm9ybWF0UGF5bG9hZCkudG8uaGF2ZS5iZWVuLmNhbGxlZFdpdGgoZGF0YSwgJ2ZvbycpXG4gICAgfSk7XG5cbiAgICBpdCgndGhyb3dzIHdoZW4gZ2l2ZW4gYSBidW5rIGZ1bmN0aW9uJywgZG9uZSA9PiB7XG4gICAgICB2YXIgZm9ybWF0ID0gbmV3IEZvcm1hdFN0cmVhbShtc2cgPT4gbnVsbCk7XG4gICAgICBmb3JtYXQub24oJ2Vycm9yJywgZXJyID0+IHtcbiAgICAgICAgZXhwZWN0KGVycikudG8uYmUuYW4uZXJyb3I7XG4gICAgICAgIGRvbmUoKTtcbiAgICAgIH0pXG4gICAgICBmb3JtYXQud3JpdGUoZGF0YSk7XG4gICAgfSk7XG5cbiAgICBpdCgnaGFuZGxlcyBlcnJvcnMgZnJvbSBmb3JtYXRQYXlsb2FkJywgZG9uZSA9PiB7XG4gICAgICB2YXIgZm9ybWF0ID0gbmV3IEZvcm1hdFN0cmVhbShtc2cgPT4gJ2ZvbycpO1xuICAgICAgdmFyIGVycm9yID0gbmV3IEVycm9yKCdmb28nKTtcbiAgICAgIGZvcm1hdFN0dWIudGhyb3dzKGVycm9yKTtcbiAgICAgIGZvcm1hdC5vbignZXJyb3InLCBlcnIgPT4ge1xuICAgICAgICBleHBlY3QoZXJyKS50by5lcXVhbChlcnJvcik7XG4gICAgICAgIGRvbmUoKTtcbiAgICAgIH0pXG4gICAgICBmb3JtYXQud3JpdGUoZGF0YSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdfZm9ybWF0UGF5bG9hZCcsICgpID0+IHtcbiAgICB2YXIgZGF0YSA9IHtcbiAgICAgIGZvbzogJ2JhcidcbiAgICB9O1xuXG4gICAgaXQoJ21ha2VzIG1lc3NhZ2VzIGludG8gYW4gQXJyYXknLCAoKSA9PiB7XG4gICAgICB2YXIgcGF5bG9hZCA9IEZvcm1hdFN0cmVhbS5fZm9ybWF0UGF5bG9hZChkYXRhLCAnYmF6Jyk7XG4gICAgICBleHBlY3QocGF5bG9hZCkudG8uYmUuYW4oJ2FycmF5JylcbiAgICAgIGV4cGVjdChwYXlsb2FkWzBdLm1lc3NhZ2VzKS50by5iZS5hbignYXJyYXknKVxuICAgICAgLy8gZXhwZWN0KHBheWxvYWRbMF0ubWVzc2FnZXNbMF0pLnRvLmVxdWFsKCdmb28nKVxuICAgIH0pO1xuXG4gICAgaXQoJ21ha2VzIHRoZSB0b3BpYyB3aGF0ZXZlciB0aGUgdG9waWMgc2hvdWxkIGJlJywgKCkgPT4ge1xuICAgICAgdmFyIHBheWxvYWQgPSBGb3JtYXRTdHJlYW0uX2Zvcm1hdFBheWxvYWQoZGF0YSwgJ2JheicpO1xuICAgICAgZXhwZWN0KHBheWxvYWRbMF0udG9waWMpLnRvLmVxdWFsKCdiYXonKVxuICAgIH0pO1xuXG4gICAgaXQoJ3Rocm93cyB3aGVuIG5vdCBnaXZlbiBhIHRvcGljJywgKCkgPT4ge1xuICAgICAgZXhwZWN0KEZvcm1hdFN0cmVhbS5fZm9ybWF0UGF5bG9hZC5iaW5kKG51bGwsIGRhdGEpKS50by50aHJvdygpXG4gICAgfSk7XG5cbiAgICBpdCgnd29ya3Mgd2l0aCBhcnJheXMnLCAoKSA9PiB7XG4gICAgICB2YXIgYXJyID0gWydmb28nLCAnYmFyJ11cbiAgICAgIHZhciBwYXlsb2FkID0gRm9ybWF0U3RyZWFtLl9mb3JtYXRQYXlsb2FkKGFyciwgJ2JheicpO1xuICAgICAgZXhwZWN0KEpTT04ucGFyc2UocGF5bG9hZFswXS5tZXNzYWdlc1swXSkpLnRvLmVxdWFsKCdmb28nKTtcbiAgICAgIGV4cGVjdChKU09OLnBhcnNlKHBheWxvYWRbMF0ubWVzc2FnZXNbMV0pKS50by5lcXVhbCgnYmFyJyk7XG4gICAgfSk7XG5cbiAgfSk7XG59KTtcbiJdfQ==