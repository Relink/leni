'use strict';

var chai = require('chai');
chai.use(require('sinon-chai'));
var expect = chai.expect;
var sinon = require('sinon');
var proxyquire = require('proxyquire');

var stream = require('stream');

var FormatStream = require('./FormatStream');

describe('FormatStream', function () {

  describe('Constructor', function () {
    var data = { bar: 'qux' };
    var formatStub = sinon.stub();

    before(function () {
      sinon.stub(FormatStream, '_formatPayload', formatStub);
    });
    beforeEach(function () {
      FormatStream._formatPayload.reset();
      formatStub.reset();
    });
    after(function () {
      return FormatStream._formatPayload.restore();
    });

    it('handles errors from formatPayload', function (done) {
      var format = new FormatStream(function (msg) {
        return 'foo';
      });
      var error = new Error('foo');
      formatStub.throws(error);
      format.on('error', function (err) {
        expect(err).to.equal(error);
        done();
      });
      format.write(data);
    });
  });

  describe('_formatPayload', function () {
    var data = {
      foo: 'bar'
    };

    it('takes a function as a topic transformer', function () {
      var payload = FormatStream._formatPayload('foo', function (msg) {
        return 'bar';
      });
      expect(payload[0].topic).to.equal('bar');
    });

    it('throws when given a bunk function', function () {
      var bunk = function bunk(msg) {
        return null;
      };
      expect(FormatStream._formatPayload.bind('foo', bunk)).to.throw(/topic transformation/);
    });

    it('makes messages into an Array', function () {
      var payload = FormatStream._formatPayload(data, 'baz');
      expect(payload).to.be.an('array');
      expect(payload[0].messages).to.be.an('array');
    });

    it('makes the topic whatever the topic should be', function () {
      var payload = FormatStream._formatPayload(data, 'baz');
      expect(payload[0].topic).to.equal('baz');
    });

    it('throws when not given a topic', function () {
      expect(FormatStream._formatPayload.bind(null, data)).to.throw();
    });

    it('works with arrays', function () {
      var arr = ['foo', 'bar'];
      var payload = FormatStream._formatPayload(arr, 'baz');
      expect(JSON.parse(payload[0].messages[0])).to.equal('foo');
      expect(JSON.parse(payload[0].messages[1])).to.equal('bar');
    });
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9Gb3JtYXRTdHJlYW0uc3BlYy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLElBQUksT0FBTyxRQUFRLE1BQVIsQ0FBUDtBQUNKLEtBQUssR0FBTCxDQUFTLFFBQVEsWUFBUixDQUFUO0FBQ0EsSUFBSSxTQUFTLEtBQUssTUFBTDtBQUNiLElBQUksUUFBUSxRQUFRLE9BQVIsQ0FBUjtBQUNKLElBQUksYUFBYSxRQUFRLFlBQVIsQ0FBYjs7QUFFSixJQUFJLFNBQVMsUUFBUSxRQUFSLENBQVQ7O0FBR0osSUFBSSxlQUFlLFFBQVEsZ0JBQVIsQ0FBZjs7QUFFSixTQUFTLGNBQVQsRUFBeUIsWUFBTTs7QUFFN0IsV0FBUyxhQUFULEVBQXdCLFlBQU07QUFDNUIsUUFBSSxPQUFPLEVBQUUsS0FBSyxLQUFMLEVBQVQsQ0FEd0I7QUFFNUIsUUFBSSxhQUFhLE1BQU0sSUFBTixFQUFiLENBRndCOztBQUk1QixXQUFPLFlBQU07QUFDWCxZQUFNLElBQU4sQ0FBVyxZQUFYLEVBQXlCLGdCQUF6QixFQUEyQyxVQUEzQyxFQURXO0tBQU4sQ0FBUCxDQUo0QjtBQU81QixlQUFXLFlBQU07QUFDZixtQkFBYSxjQUFiLENBQTRCLEtBQTVCLEdBRGU7QUFFZixpQkFBVyxLQUFYLEdBRmU7S0FBTixDQUFYLENBUDRCO0FBVzVCLFVBQU07YUFBTSxhQUFhLGNBQWIsQ0FBNEIsT0FBNUI7S0FBTixDQUFOLENBWDRCOztBQWE1QixPQUFHLG1DQUFILEVBQXdDLGdCQUFRO0FBQzlDLFVBQUksU0FBUyxJQUFJLFlBQUosQ0FBaUI7ZUFBTztPQUFQLENBQTFCLENBRDBDO0FBRTlDLFVBQUksUUFBUSxJQUFJLEtBQUosQ0FBVSxLQUFWLENBQVIsQ0FGMEM7QUFHOUMsaUJBQVcsTUFBWCxDQUFrQixLQUFsQixFQUg4QztBQUk5QyxhQUFPLEVBQVAsQ0FBVSxPQUFWLEVBQW1CLGVBQU87QUFDeEIsZUFBTyxHQUFQLEVBQVksRUFBWixDQUFlLEtBQWYsQ0FBcUIsS0FBckIsRUFEd0I7QUFFeEIsZUFGd0I7T0FBUCxDQUFuQixDQUo4QztBQVE5QyxhQUFPLEtBQVAsQ0FBYSxJQUFiLEVBUjhDO0tBQVIsQ0FBeEMsQ0FiNEI7R0FBTixDQUF4QixDQUY2Qjs7QUEyQjdCLFdBQVMsZ0JBQVQsRUFBMkIsWUFBTTtBQUMvQixRQUFJLE9BQU87QUFDVCxXQUFLLEtBQUw7S0FERSxDQUQyQjs7QUFLL0IsT0FBRyx5Q0FBSCxFQUE4QyxZQUFNO0FBQ2xELFVBQUksVUFBVSxhQUFhLGNBQWIsQ0FBNEIsS0FBNUIsRUFBbUM7ZUFBTztPQUFQLENBQTdDLENBRDhDO0FBRWxELGFBQU8sUUFBUSxDQUFSLEVBQVcsS0FBWCxDQUFQLENBQXlCLEVBQXpCLENBQTRCLEtBQTVCLENBQWtDLEtBQWxDLEVBRmtEO0tBQU4sQ0FBOUMsQ0FMK0I7O0FBVS9CLE9BQUcsbUNBQUgsRUFBd0MsWUFBTTtBQUM1QyxVQUFJLE9BQU8sU0FBUCxJQUFPO2VBQU87T0FBUCxDQURpQztBQUU1QyxhQUFPLGFBQWEsY0FBYixDQUE0QixJQUE1QixDQUFpQyxLQUFqQyxFQUF3QyxJQUF4QyxDQUFQLEVBQ0csRUFESCxDQUNNLEtBRE4sQ0FDWSxzQkFEWixFQUY0QztLQUFOLENBQXhDLENBVitCOztBQWdCL0IsT0FBRyw4QkFBSCxFQUFtQyxZQUFNO0FBQ3ZDLFVBQUksVUFBVSxhQUFhLGNBQWIsQ0FBNEIsSUFBNUIsRUFBa0MsS0FBbEMsQ0FBVixDQURtQztBQUV2QyxhQUFPLE9BQVAsRUFBZ0IsRUFBaEIsQ0FBbUIsRUFBbkIsQ0FBc0IsRUFBdEIsQ0FBeUIsT0FBekIsRUFGdUM7QUFHdkMsYUFBTyxRQUFRLENBQVIsRUFBVyxRQUFYLENBQVAsQ0FBNEIsRUFBNUIsQ0FBK0IsRUFBL0IsQ0FBa0MsRUFBbEMsQ0FBcUMsT0FBckMsRUFIdUM7S0FBTixDQUFuQyxDQWhCK0I7O0FBc0IvQixPQUFHLDhDQUFILEVBQW1ELFlBQU07QUFDdkQsVUFBSSxVQUFVLGFBQWEsY0FBYixDQUE0QixJQUE1QixFQUFrQyxLQUFsQyxDQUFWLENBRG1EO0FBRXZELGFBQU8sUUFBUSxDQUFSLEVBQVcsS0FBWCxDQUFQLENBQXlCLEVBQXpCLENBQTRCLEtBQTVCLENBQWtDLEtBQWxDLEVBRnVEO0tBQU4sQ0FBbkQsQ0F0QitCOztBQTJCL0IsT0FBRywrQkFBSCxFQUFvQyxZQUFNO0FBQ3hDLGFBQU8sYUFBYSxjQUFiLENBQTRCLElBQTVCLENBQWlDLElBQWpDLEVBQXVDLElBQXZDLENBQVAsRUFBcUQsRUFBckQsQ0FBd0QsS0FBeEQsR0FEd0M7S0FBTixDQUFwQyxDQTNCK0I7O0FBK0IvQixPQUFHLG1CQUFILEVBQXdCLFlBQU07QUFDNUIsVUFBSSxNQUFNLENBQUMsS0FBRCxFQUFRLEtBQVIsQ0FBTixDQUR3QjtBQUU1QixVQUFJLFVBQVUsYUFBYSxjQUFiLENBQTRCLEdBQTVCLEVBQWlDLEtBQWpDLENBQVYsQ0FGd0I7QUFHNUIsYUFBTyxLQUFLLEtBQUwsQ0FBVyxRQUFRLENBQVIsRUFBVyxRQUFYLENBQW9CLENBQXBCLENBQVgsQ0FBUCxFQUEyQyxFQUEzQyxDQUE4QyxLQUE5QyxDQUFvRCxLQUFwRCxFQUg0QjtBQUk1QixhQUFPLEtBQUssS0FBTCxDQUFXLFFBQVEsQ0FBUixFQUFXLFFBQVgsQ0FBb0IsQ0FBcEIsQ0FBWCxDQUFQLEVBQTJDLEVBQTNDLENBQThDLEtBQTlDLENBQW9ELEtBQXBELEVBSjRCO0tBQU4sQ0FBeEIsQ0EvQitCO0dBQU4sQ0FBM0IsQ0EzQjZCO0NBQU4sQ0FBekIiLCJmaWxlIjoiRm9ybWF0U3RyZWFtLnNwZWMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgY2hhaSA9IHJlcXVpcmUoJ2NoYWknKTtcbmNoYWkudXNlKHJlcXVpcmUoJ3Npbm9uLWNoYWknKSk7XG52YXIgZXhwZWN0ID0gY2hhaS5leHBlY3Q7XG52YXIgc2lub24gPSByZXF1aXJlKCdzaW5vbicpO1xudmFyIHByb3h5cXVpcmUgPSByZXF1aXJlKCdwcm94eXF1aXJlJyk7XG5cbnZhciBzdHJlYW0gPSByZXF1aXJlKCdzdHJlYW0nKTtcblxuXG52YXIgRm9ybWF0U3RyZWFtID0gcmVxdWlyZSgnLi9Gb3JtYXRTdHJlYW0nKTtcblxuZGVzY3JpYmUoJ0Zvcm1hdFN0cmVhbScsICgpID0+IHtcblxuICBkZXNjcmliZSgnQ29uc3RydWN0b3InLCAoKSA9PiB7XG4gICAgdmFyIGRhdGEgPSB7IGJhcjogJ3F1eCcgfTtcbiAgICB2YXIgZm9ybWF0U3R1YiA9IHNpbm9uLnN0dWIoKTtcblxuICAgIGJlZm9yZSgoKSA9PiB7XG4gICAgICBzaW5vbi5zdHViKEZvcm1hdFN0cmVhbSwgJ19mb3JtYXRQYXlsb2FkJywgZm9ybWF0U3R1Yik7XG4gICAgfSlcbiAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgIEZvcm1hdFN0cmVhbS5fZm9ybWF0UGF5bG9hZC5yZXNldCgpO1xuICAgICAgZm9ybWF0U3R1Yi5yZXNldCgpO1xuICAgIH0pXG4gICAgYWZ0ZXIoKCkgPT4gRm9ybWF0U3RyZWFtLl9mb3JtYXRQYXlsb2FkLnJlc3RvcmUoKSlcblxuICAgIGl0KCdoYW5kbGVzIGVycm9ycyBmcm9tIGZvcm1hdFBheWxvYWQnLCBkb25lID0+IHtcbiAgICAgIHZhciBmb3JtYXQgPSBuZXcgRm9ybWF0U3RyZWFtKG1zZyA9PiAnZm9vJyk7XG4gICAgICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IoJ2ZvbycpO1xuICAgICAgZm9ybWF0U3R1Yi50aHJvd3MoZXJyb3IpO1xuICAgICAgZm9ybWF0Lm9uKCdlcnJvcicsIGVyciA9PiB7XG4gICAgICAgIGV4cGVjdChlcnIpLnRvLmVxdWFsKGVycm9yKTtcbiAgICAgICAgZG9uZSgpO1xuICAgICAgfSlcbiAgICAgIGZvcm1hdC53cml0ZShkYXRhKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ19mb3JtYXRQYXlsb2FkJywgKCkgPT4ge1xuICAgIHZhciBkYXRhID0ge1xuICAgICAgZm9vOiAnYmFyJ1xuICAgIH07XG5cbiAgICBpdCgndGFrZXMgYSBmdW5jdGlvbiBhcyBhIHRvcGljIHRyYW5zZm9ybWVyJywgKCkgPT4ge1xuICAgICAgdmFyIHBheWxvYWQgPSBGb3JtYXRTdHJlYW0uX2Zvcm1hdFBheWxvYWQoJ2ZvbycsIG1zZyA9PiAnYmFyJyk7XG4gICAgICBleHBlY3QocGF5bG9hZFswXS50b3BpYykudG8uZXF1YWwoJ2JhcicpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Rocm93cyB3aGVuIGdpdmVuIGEgYnVuayBmdW5jdGlvbicsICgpID0+IHtcbiAgICAgIHZhciBidW5rID0gbXNnID0+IG51bGw7XG4gICAgICBleHBlY3QoRm9ybWF0U3RyZWFtLl9mb3JtYXRQYXlsb2FkLmJpbmQoJ2ZvbycsIGJ1bmspKVxuICAgICAgICAudG8udGhyb3coL3RvcGljIHRyYW5zZm9ybWF0aW9uLyk7XG4gICAgfSk7XG5cbiAgICBpdCgnbWFrZXMgbWVzc2FnZXMgaW50byBhbiBBcnJheScsICgpID0+IHtcbiAgICAgIHZhciBwYXlsb2FkID0gRm9ybWF0U3RyZWFtLl9mb3JtYXRQYXlsb2FkKGRhdGEsICdiYXonKTtcbiAgICAgIGV4cGVjdChwYXlsb2FkKS50by5iZS5hbignYXJyYXknKTtcbiAgICAgIGV4cGVjdChwYXlsb2FkWzBdLm1lc3NhZ2VzKS50by5iZS5hbignYXJyYXknKTtcbiAgICB9KTtcblxuICAgIGl0KCdtYWtlcyB0aGUgdG9waWMgd2hhdGV2ZXIgdGhlIHRvcGljIHNob3VsZCBiZScsICgpID0+IHtcbiAgICAgIHZhciBwYXlsb2FkID0gRm9ybWF0U3RyZWFtLl9mb3JtYXRQYXlsb2FkKGRhdGEsICdiYXonKTtcbiAgICAgIGV4cGVjdChwYXlsb2FkWzBdLnRvcGljKS50by5lcXVhbCgnYmF6JylcbiAgICB9KTtcblxuICAgIGl0KCd0aHJvd3Mgd2hlbiBub3QgZ2l2ZW4gYSB0b3BpYycsICgpID0+IHtcbiAgICAgIGV4cGVjdChGb3JtYXRTdHJlYW0uX2Zvcm1hdFBheWxvYWQuYmluZChudWxsLCBkYXRhKSkudG8udGhyb3coKVxuICAgIH0pO1xuXG4gICAgaXQoJ3dvcmtzIHdpdGggYXJyYXlzJywgKCkgPT4ge1xuICAgICAgdmFyIGFyciA9IFsnZm9vJywgJ2JhciddXG4gICAgICB2YXIgcGF5bG9hZCA9IEZvcm1hdFN0cmVhbS5fZm9ybWF0UGF5bG9hZChhcnIsICdiYXonKTtcbiAgICAgIGV4cGVjdChKU09OLnBhcnNlKHBheWxvYWRbMF0ubWVzc2FnZXNbMF0pKS50by5lcXVhbCgnZm9vJyk7XG4gICAgICBleHBlY3QoSlNPTi5wYXJzZShwYXlsb2FkWzBdLm1lc3NhZ2VzWzFdKSkudG8uZXF1YWwoJ2JhcicpO1xuICAgIH0pO1xuXG4gIH0pO1xufSk7XG4iXX0=