'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var chai = require('chai');
chai.use(require('sinon-chai'));
var expect = chai.expect;
var sinon = require('sinon');
var proxyquire = require('proxyquire');
var Promise = require('bluebird');
var EventEmitter = require('events').EventEmitter;
var stream = require('stream');

describe('ProducerStream', function () {
  var e1, e2;

  var MockProducer = function MockProducer() {
    _classCallCheck(this, MockProducer);
  };

  ;
  var kafkaNodeMock = {
    Producer: MockProducer,
    HighLevelProducer: MockProducer,
    Client: sinon.stub(),
    Consumer: sinon.stub()
  };

  var eddiesMock = {
    create: sinon.stub()
  };

  var ProducerStream = proxyquire('./ProducerStream', {
    'kafka-node': kafkaNodeMock,
    '@relinklabs/eddies': eddiesMock
  });

  beforeEach(function () {
    e1 = new EventEmitter();
    e2 = new EventEmitter();
  });

  describe('constructor', function () {
    var eddy;
    var producer = { foo: 'bar ' };
    var sendStub = sinon.stub();

    before(function () {
      return sinon.stub(ProducerStream, '_sendMessage', sendStub);
    });
    beforeEach(function () {
      eddy = new stream.Duplex({ read: function read() {
          return null;
        } });
      eddiesMock.create.returns(eddy);
      eddiesMock.create.reset();
      ProducerStream._sendMessage.reset();
      sendStub.reset();
    });
    after(function () {
      return ProducerStream._sendMessage.restore();
    });

    it('returns the stream created by eddy when duplex is true', function () {
      var p = new ProducerStream(producer, { duplex: true });
      expect(p).to.equal(eddy);
    });

    it('returns a freely writeable stream when duplex is false', function () {
      var p = new ProducerStream(producer, { duplex: false });
      expect(p instanceof stream.Writable).to.be.true;

      // simulate a lot of write to show it never blocks up.
      var i = 200;
      while (--i > 0) {
        expect(p.write({ foo: 'bar' })).to.be.true;
      }
    });

    it('properly formats messages for eddies.create', function (done) {
      var p = new ProducerStream('producer', { duplex: false });
      sendStub.returns(Promise.resolve('foo'));
      var fn = eddiesMock.create.firstCall.args[1];
      fn('foo').then(function (res) {
        expect(res).to.deep.equal({ message: 'foo' });
        expect(ProducerStream._sendMessage).to.have.been.calledWith('producer', 'foo');
        done();
      });
    });
  });

  describe('sendMessage', function () {
    it('rejects when not given a correct kafka producer', function (done) {
      ProducerStream._sendMessage({ not: 'a producer' }, {}, 'foo').catch(function (e) {
        expect(e).to.be.instanceof(TypeError);
        done();
      });
    });

    it('sends a message out on a producer!', function (done) {
      var producer = new MockProducer();
      producer.sendAsync = sinon.stub().returns(Promise.resolve('foo'));
      var message = { foo: 'bar' };
      ProducerStream._sendMessage(producer, message).then(function (msg) {
        expect(msg).to.equal('foo');
        expect(producer.sendAsync).to.have.been.calledWith(message);
        done();
      });
    });
  });
});
//# sourceMappingURL=data:application/json;base64,